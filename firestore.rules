rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all to be secure by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection - users can read other profiles, but only update their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      
      // Additional security for user data
      match /private/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Jobs collection - public read for students, employer can manage their own
    match /jobs/{jobId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      
      // Validate job data on create/update
      allow create, update: if request.auth != null &&
        request.resource.data.keys().hasAll(['title', 'company', 'description', 'createdBy']) &&
        request.resource.data.title is string &&
        request.resource.data.company is string &&
        request.resource.data.description is string &&
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Applications collection - private to applicant and job owner
    match /applications/{applicationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.createdBy
      );
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.createdBy
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Chats collection - private between users
    match /chats/{chatId} {
      // Users can read/query chats they are a participant in
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
        
      // Users can create chats if they are the ones initiating
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
        
      // No updates or deletes allowed
      allow update, delete: if false;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only participants can read messages
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
          
        // Only participants can send messages
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // User settings - private to each user
    match /settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admin panel collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // User verification documents
    match /verifications/{verificationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.userId == 'all_students'
      );
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'employer'];
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.reviewerId == request.auth.uid;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.reviewerId;
    }
  }
}
